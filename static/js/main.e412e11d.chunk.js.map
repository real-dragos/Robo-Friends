{"version":3,"sources":["containers/App/App.module.css","components/Scroll/Scroll.module.css","components/Card/Card.module.css","components/CardList/CardList.module.css","components/SearchBox/SearchBox.module.css","components/Card/Card.js","components/CardList/CardList.js","components/Scroll/Scroll.js","components/SearchBox/SearchBox.js","containers/App/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["module","exports","Card","id","name","email","className","classes","alt","src","CardList","robots","map","robot","key","Scroll","props","children","SearchBox","searchChange","type","onChange","placeholder","App","this","onRequestRobots","searchField","onSearchChangeHandler","isPending","filteredRobots","filter","toLowerCase","includes","styles","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","res","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e412e11d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2L7-L\",\"main-title\":\"App_main-title__36czr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"innerScroll\":\"Scroll_innerScroll__3Vg1v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Card\":\"Card_Card__252Xt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CardList\":\"CardList_CardList__23WCo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchBox\":\"SearchBox_searchBox__3naBr\"};","import React from 'react';\r\nimport classes from './Card.module.css';\r\n\r\nconst Card = ({id, name, email}) => {\r\n    return (\r\n        <div className={classes['Card']}>\r\n            <img alt=\"a robot\" src={`https://robohash.org/${id}?size=200x200`}/>\r\n            <h1>{name}</h1>\r\n            <h3>{email}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from '../Card/Card';\r\nimport classes from './CardList.module.css';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div className={classes['CardList']}>\r\n            {robots.map((robot) =>\r\n                <Card key={robot.id} id={robot.id} name={robot.name} email={robot.email} />\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\nimport classes from './Scroll.module.css';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div className={classes['outerScroll']}>\r\n            <div className={classes['innerScroll']}>\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Scroll;\r\n","import React from 'react';\r\nimport classes from './SearchBox.module.css';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    return (\r\n        <div className={classes['searchBox']}>\r\n            <input type=\"search\" onChange={searchChange} placeholder=\"Search your robofriends\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport styles from './App.module.css';\r\nimport CardList from '../../components/CardList/CardList';\r\nimport Scroll from '../../components/Scroll/Scroll';\r\nimport SearchBox from '../../components/SearchBox/SearchBox';\r\n\r\nimport { setSearchField, requestRobots } from './../../actions';\r\n\r\nconst mapStateToProps = state => {\r\n  return { \r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return { \r\n    onSearchChangeHandler: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const {searchField, onSearchChangeHandler, robots, isPending} = this.props;\r\n\r\n    const filteredRobots = robots.filter((robot) => robot.name.toLowerCase().includes(searchField.toLowerCase()));\r\n\r\n    return isPending ? <h1>Loading</h1> : (\r\n      <div className={styles['App']}>\r\n        <div>\r\n          <h1 id={styles['main-title']}>Robo Friends</h1>\r\n          <SearchBox searchChange={onSearchChangeHandler} />\r\n        </div>\r\n        <Scroll>\r\n          <CardList robots={filteredRobots} />\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUESTS_ROBOTS_PENDING,\r\n    REQUESTS_ROBOTS_SUCCESS,\r\n    REQUESTS_ROBOTS_FAILED,\r\n    robotsUrl\r\n} from './constants';\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});\r\n\r\nexport const requestRobots = () =>  (dispatch) => {\r\n    dispatch({\r\n        type: REQUESTS_ROBOTS_PENDING,\r\n    });\r\n    fetch(robotsUrl)\r\n    .then(res => res.json())\r\n    .then(data => dispatch({\r\n        type: REQUESTS_ROBOTS_SUCCESS,\r\n        payload: data\r\n    }))\r\n    .catch(error => dispatch({\r\n        type: REQUESTS_ROBOTS_FAILED,\r\n        payload: error\r\n    }))\r\n}\r\n\r\n","export const robotsUrl = 'https://jsonplaceholder.typicode.com/users';\r\nexport const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUESTS_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUESTS_ROBOTS_SUCCESS = 'REQUESTS_ROBOTS_SUCCESS';\r\nexport const REQUESTS_ROBOTS_FAILED = 'REQUESTS_ROBOTS_FAILED';","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUESTS_ROBOTS_PENDING,\r\n    REQUESTS_ROBOTS_SUCCESS,\r\n    REQUESTS_ROBOTS_FAILED,\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return { ...state, searchField: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) =>{\r\n    switch(action.type) {\r\n        case REQUESTS_ROBOTS_PENDING:\r\n            return {...state, isPending: true};\r\n        case REQUESTS_ROBOTS_SUCCESS:\r\n            return {...state, robots: action.payload, isPending: false};\r\n        case REQUESTS_ROBOTS_FAILED:\r\n            return {...state, error: action.payload, isPending: false};\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\r\nimport {createLogger} from 'redux-logger';\r\nimport thunkMiddleware from  'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {searchRobots, requestRobots} from './reducers';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({searchRobots, requestRobots});\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}